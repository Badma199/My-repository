{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from datetime import datetime, timedelta\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 100_000_000\n",
    "np.random.seed(0)\n",
    "np.random.seed(0)\n",
    "data = {\n",
    "    'numeric': np.random.rand(n),  \n",
    "    # Числовые данные\n",
    "    'datetime': [datetime.now() - timedelta(days=random.randint(0, 365*3)) for _ in range(n)],  \n",
    "    # Дата в диапазоне 3 лет\n",
    "    'string': np.random.choice(['apple', 'banana', 'cherry', 'date', 'empty'], n)  \n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.concat([df, df.sample(frac=0.1, random_state=1)]).reset_index(drop=True)\n",
    "\n",
    "# Сохраняем в CSV\n",
    "df.to_csv('dataset.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove_na(df):\n",
    "    return df.dropna()\n",
    "\n",
    "def remove_duplicates(df):\n",
    "    return df.drop_duplicates()\n",
    "\n",
    "def clean_strings(df):\n",
    "    df['string'] = df['string'].apply(lambda x: np.nan if not any(char.isdigit() for char in x) else x)\n",
    "    return df\n",
    "\n",
    "def remove_time_range(df):\n",
    "    df['datetime'] = pd.to_datetime(df['datetime'])\n",
    "    return df[~df['datetime'].dt.hour.isin([1, 2, 3])]\n",
    "\n",
    "# Обработанные данные\n",
    "df.to_csv('cleaned_dataset.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "df['hour'] = df['datetime'].dt.hour\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Расчет метрик\n",
    "metrics = df.groupby('hour').agg(\n",
    "    unique_strings=('string', 'nunique'),\n",
    "    mean_numeric=('numeric', 'mean'),\n",
    "    median_numeric=('numeric', 'median')\n",
    ").reset_index()\n",
    "\n",
    "print(metrics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.merge(metrics, on='hour', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Гистограмма и 95% доверительный интервал:\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "\n",
    "# Гистограмма\n",
    "plt.hist(df['numeric'], bins=50)\n",
    "plt.title('Гистограмма для numeric')\n",
    "plt.xlabel('Значение')\n",
    "plt.ylabel('Частота')\n",
    "plt.show()\n",
    "\n",
    "# 95% доверительный интервал\n",
    "mean = df['numeric'].mean()\n",
    "sem = stats.sem(df['numeric'])  # стандартная ошибка среднего\n",
    "conf_interval = stats.norm.interval(0.95, loc=mean, scale=sem)\n",
    "print(f\"95% доверительный интервал: {conf_interval}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### Среднее значение по месяцам:\n",
    "df['month'] = df['datetime'].dt.to_period('M')\n",
    "\n",
    "monthly_mean = df.groupby('month')['numeric'].mean().reset_index()\n",
    "\n",
    "plt.plot(monthly_mean['month'].astype(str), monthly_mean['numeric'])\n",
    "plt.title('Среднее значение numeric по месяцам')\n",
    "plt.xlabel('Месяц')\n",
    "plt.ylabel('Среднее значение')\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "from collections import Counter\n",
    "\n",
    "# Частотность символов в строках\n",
    "string_series = df['string'].dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
